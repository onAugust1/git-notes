git init

git clone https://....

git remote add name https://....

git branch --list

git brach branchname

git checkout brancnname

git status #show file status

git add filename #cache modified file

git commit -am "" (branchname) #commit all-cached file

git commit filename -m "" (branchname) #commit cached file

git log --pretty=oneline --all --graph #show log

git merge branchname  #current branch merge other branch

cat filename #show the content of file

git stash #clean my resposity to work on other thing,such as "checkout"

git stach list # list of your stash,it likes a stack

git stash apply stash@{} #apply your latest stash content,you could stash more than one time,after you git stash,you git stash again.you could use git stash list to choose which stash you want to use.but it is worthing noting that,the latest stash is 0,and the first stash is the max-number.

git checkout -- filename #be serious to use this command,it will go to the initial version,you will lost all yuor modifications of this file.

git stash pop #get latest version that you stashedï¼Œbut it will delete your latest version,it likes a stack

git reset head~(2|3|..) --soft#~ means last commit version,number means which time you commit,soft means reset your commit ,but all modifications of you are resume,and your files are cached now.you could delete "soft",then you should use "git add" to add it to your cached room.you chould use "--hard",all modifications of yours are lost!  

git push remote.name local.name#push local branch to remote branch

git pull# git fetch + git merge

git fetch#fetch branch

aaaa